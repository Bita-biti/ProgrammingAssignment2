# Function to create a special matrix object that can cache its inverse
makeCacheMatrix <- function(mat = matrix()) {
inv <- NULL
set <- function(matrix) {
mat <<- matrix
inv <<- NULL
}
get <- function() mat
setInverse <- function(inverse) {
inv <<- inverse
}
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
# Function to compute the inverse of the matrix and cache the result
cacheSolve <- function(cacheMatrix) {
inv <- cacheMatrix$getInverse()
if (!is.null(inv)) {
message("Getting cached inverse")
return(inv)
}
mat <- cacheMatrix$get()
inv <- solve(mat)
cacheMatrix$setInverse(inv)
inv
}
# Create a sample matrix
A <- matrix(c(1, 2, 3, 4), nrow = 2)
# Create a cache-enabled matrix object
cachedMatrix <- makeCacheMatrix(A)
# Compute and cache the inverse
cacheSolve(cachedMatrix)
